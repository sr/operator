package main

import "github.com/sr/operator/generator"

var mainTemplate = generator.NewTemplate("main-gen.go",
	`// Code generated by protoc-gen-operatorcmd
package main

import (
	"flag"
	"fmt"
	"io"
	"os"

	"github.com/sr/operator"
	"golang.org/x/net/context"

{{range $k, $v := .Imports}}
	{{$k}} "{{$v}}"
{{end}}
)

const program = "operatorctl"

var cmd = operator.NewCommand(
	program,
	[]operator.ServiceCommand{
{{- range .Services}}
{{- if .Enabled }}
		{
{{- $pkg := .Package }}
{{- $svc := .Name }}
			Name:     "{{serviceName .Name}}",
			Synopsis: `+"`"+`{{ .Description }}`+"`"+`,
			Methods: []operator.MethodCommand{
	{{- range .Methods}}
				{
					Name: "{{methodName .Name}}",
					Synopsis: `+"`"+`{{.Description}}`+"`"+`,
					Flags: []*flag.Flag{
					{{- range .Arguments }}
						{
							Name:  "{{argName .Name}}",
							Usage: "{{.Description}}",
						},
					{{- end }}
					},
					Run: func(ctx *operator.CommandContext) (string, error) {
			{{- range .Arguments}}
						{{.Name}} := ctx.Flags.String("{{flagName .Name}}", "", "")
			{{- end}}
						if err := ctx.Flags.Parse(ctx.Args); err != nil {
							return "", err
						}
						conn, err := ctx.GetConn()
						if err != nil {
							return "", err
						}
						defer conn.Close()
						client := {{$pkg}}.New{{$svc}}Client(conn)
						resp, err := client.{{.Name}}(
							context.Background(),
							&{{$pkg}}.{{.Input}}{
								Request: ctx.Request,
								{{- range .Arguments}}
								{{inputField .Name}}: *{{.Name}},
								{{- end}}
							},
						)
						if err != nil {
							return "", err
						}
						return resp.Message, nil
					},
				},
	{{- end }}
			},
		},
{{- end}}
{{end}}
	},
)

func main() {
	status, output := cmd.Run(os.Args)
	if status != 0 {
		if _, err := fmt.Fprintf(os.Stderr, "%s: %s\n", program, output); err != nil {
			panic(err)
		}
	} else {
		if _, err := io.WriteString(os.Stdout, output+"\n"); err != nil {
			panic(err)
		}
	}
	os.Exit(status)
}`)
