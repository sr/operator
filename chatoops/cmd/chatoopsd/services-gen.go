// Code generated by protoc-gen-operatord
package main

import (
	"errors"
	"flag"
	"os"
	"strings"

	"github.com/sr/operator"
	"google.golang.org/grpc"

	"github.com/sr/operator/chatoops/services/buildkite"
	"github.com/sr/operator/chatoops/services/gcloud"
	"github.com/sr/operator/chatoops/services/papertrail"
)

func registerServices(
	server *grpc.Server,
	logger operator.Logger,
	flags *flag.FlagSet,
) error {
	buildkiteConfig := &buildkite.BuildkiteServiceConfig{}
	gcloudConfig := &gcloud.GcloudServiceConfig{}
	papertrailConfig := &papertrail.PapertrailServiceConfig{}
	flags.StringVar(&buildkiteConfig.ApiToken, "buildkite-api_token", "", "")
	flags.StringVar(&gcloudConfig.ProjectId, "gcloud-project_id", "", "")
	flags.StringVar(&gcloudConfig.DefaultZone, "gcloud-default_zone", "", "")
	flags.StringVar(&gcloudConfig.DefaultNetwork, "gcloud-default_network", "", "")
	flags.StringVar(&gcloudConfig.DefaultImage, "gcloud-default_image", "", "")
	flags.StringVar(&gcloudConfig.DefaultMachineType, "gcloud-default_machine_type", "", "")
	flags.StringVar(&gcloudConfig.ServiceAccountEmail, "gcloud-service_account_email", "", "")
	flags.StringVar(&gcloudConfig.StartupScript, "gcloud-startup_script", "", "")
	flags.StringVar(&papertrailConfig.ApiKey, "papertrail-api_key", "", "")
	flags.VisitAll(func(f *flag.Flag) {
		k := strings.ToUpper(strings.Replace(f.Name, "-", "_", -1))
		v := os.Getenv(k)
		if v != "" {
			if err := f.Value.Set(v); err != nil {
				return err
			}
		}
	})
	if err := flags.Parse(os.Args[1:]); err != nil {
		return err
	}

	errs := make(map[string][]error)

	if buildkiteConfig.ApiToken == "" {
		errs["buildkite"] = append(errs["buildkite"], errors.New("api_token"))
	}
	if gcloudConfig.ProjectId == "" {
		errs["gcloud"] = append(errs["gcloud"], errors.New("project_id"))
	}
	if gcloudConfig.DefaultZone == "" {
		errs["gcloud"] = append(errs["gcloud"], errors.New("default_zone"))
	}
	if gcloudConfig.DefaultNetwork == "" {
		errs["gcloud"] = append(errs["gcloud"], errors.New("default_network"))
	}
	if gcloudConfig.DefaultImage == "" {
		errs["gcloud"] = append(errs["gcloud"], errors.New("default_image"))
	}
	if gcloudConfig.DefaultMachineType == "" {
		errs["gcloud"] = append(errs["gcloud"], errors.New("default_machine_type"))
	}
	if gcloudConfig.ServiceAccountEmail == "" {
		errs["gcloud"] = append(errs["gcloud"], errors.New("service_account_email"))
	}
	if gcloudConfig.StartupScript == "" {
		errs["gcloud"] = append(errs["gcloud"], errors.New("startup_script"))
	}
	if papertrailConfig.ApiKey == "" {
		errs["papertrail"] = append(errs["papertrail"], errors.New("api_key"))
	}

	if len(errs["buildkite"]) != 0 {
		logError(logger, "buildkite", errors.New("TODO"))
	} else {
		buildkiteServer, err := buildkite.NewAPIServer(buildkiteConfig)
		if err != nil {
			logError(logger, "buildkite", err)
		} else {
			buildkite.RegisterBuildkiteServiceServer(server, buildkiteServer)
			logger.Info(&operator.ServiceRegistered{&operator.Service{Name: "buildkite"}})
		}
	}
	if len(errs["gcloud"]) != 0 {
		logError(logger, "gcloud", errors.New("TODO"))
	} else {
		gcloudServer, err := gcloud.NewAPIServer(gcloudConfig)
		if err != nil {
			logError(logger, "gcloud", err)
		} else {
			gcloud.RegisterGcloudServiceServer(server, gcloudServer)
			logger.Info(&operator.ServiceRegistered{&operator.Service{Name: "gcloud"}})
		}
	}
	if len(errs["papertrail"]) != 0 {
		logError(logger, "papertrail", errors.New("TODO"))
	} else {
		papertrailServer, err := papertrail.NewAPIServer(papertrailConfig)
		if err != nil {
			logError(logger, "papertrail", err)
		} else {
			papertrail.RegisterPapertrailServiceServer(server, papertrailServer)
			logger.Info(&operator.ServiceRegistered{&operator.Service{Name: "papertrail"}})
		}
	}
	return nil
}

func logError(logger operator.Logger, service string, err error) {
	logger.Error(&operator.ServiceStartupError{
		Service: &operator.Service{
			Name: service,
		},
		Message: err.Error(),
	})
}
